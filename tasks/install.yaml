---

- name: detect binary file for algernon
  become: false
  delegate_to: "{{ algernon_delegate_to }}"
  ansible.builtin.stat:
    path: "{{ algernon_local_tmp_directory }}/algernon-{{ algernon_version }}-linux_{{ ansible_architecture }}_static/algernon"
  register: stat_file_binary

- name: copy binaries
  when:
    - stat_file_binary.stat.exists
  block:
    - name: propagate algernon binaries
      ansible.builtin.copy:
        src: "{{ algernon_local_tmp_directory }}/algernon-{{ algernon_version }}-linux_{{ ansible_architecture }}_static/algernon"
        dest: "{{ algernon_install_path }}/algernon"
        mode: 0755
        owner: "{{ algernon_system_user }}"
        group: "{{ algernon_system_group }}"
        remote_src: "{{ 'true' if algernon_direct_download else 'false' }}"

    - name: make files executable
      ansible.builtin.file:
        path: "{{ algernon_install_path }}/algernon"
        mode: 0755
        owner: "{{ algernon_system_user }}"
        group: "{{ algernon_system_group }}"

- name: create local facts
  ansible.builtin.template:
    src: ansible_facts.j2
    dest: /etc/ansible/facts.d/algernon.fact
    mode: 0755

- name: create data directory
  ansible.builtin.file:
    path: "{{ algernon_data_directory }}"
    state: directory
    owner: "{{ algernon_system_user }}"
    group: "{{ algernon_system_group }}"
    mode: 0755

- name: logfile
  when:
    - algernon_config.access_log is defined
    - algernon_config.access_log | length > 0
  block:
    - name: detect logfile
      ansible.builtin.stat:
        path: "{{ algernon_config.access_log }}"
      register: _logfile_exists

    - name: create logfile
      ansible.builtin.file:
        path: "{{ algernon_config.access_log }}"
        state: touch
        owner: "{{ algernon_system_user }}"
        group: "{{ algernon_system_group }}"
        mode: 0666
      run_once: true
      when:
        - not _logfile_exists.stat.exists | default('false')

- name: create link to binary
  ansible.builtin.file:
    src: "{{ algernon_install_path }}/algernon"
    dest: /usr/bin/algernon
    state: link
    force: true
    follow: false
  notify:
    - restart algernon

- name: create the systemd service file
  ansible.builtin.template:
    src: init/systemd/algernon.service.j2
    dest: "{{ systemd_lib_directory }}/algernon.service"
    owner: root
    group: root
    mode: 0644
  notify:
    - daemon-reload

- name: create the systemd service config file
  ansible.builtin.template:
    src: algernon.conf.j2
    dest: "{{ algernon_config_directory }}/algernon"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart algernon

...
